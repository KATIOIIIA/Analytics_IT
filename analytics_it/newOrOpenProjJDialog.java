/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * newOrOpenProjJDialog.java
 *
 * Created on 08.04.2015, 17:51:07
 */

package analytics_it;

import com.sun.media.ui.MessageBox;
import java.awt.Desktop.Action;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author katen'ka
 */
public class newOrOpenProjJDialog extends javax.swing.JDialog {
    /** Creates new form newOrOpenProjJDialog */
    public newOrOpenProjJDialog(java.awt.Frame parent, boolean modal, org.jdesktop.application.FrameView frameView, java.sql.Statement stmt, boolean modeNew) {
        super(parent, modal);
        initComponents();
        nameProjTextField.setText("");
        userNameTextField.setText("");
        dataCreateFormattedTextField.setText(null);
        commentTextPane.setText("");
        this.stmt = stmt;
        // запоминаем владельца окна
        if (frameView instanceof Analytics_ITView) owner = (Analytics_ITView) frameView;
        if (modeNew == false) {
            saveOrAddButton.setText("Выбрать");
            this.setTitle("Открыть проект");
            idProj = -1;
        } else {
            saveOrAddButton.setText("Добавить");
            this.setTitle("Добавить новый");
        }
        try {
            loadTreeProj();
            projTree.addMouseListener(new MouseAdapter() {
                  public void mouseClicked(MouseEvent me) {
                    doMouseClicked(me);
                  }
                });
        } catch (SQLException ex) {
            Logger.getLogger(newOrOpenProjJDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        saveOrAddButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateProj();
                setVisible(false);
                owner.updateDataForm(idProj);
                dispose();  // <-- Important
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        projSplitPane = new javax.swing.JSplitPane();
        treeProjScrollPane = new javax.swing.JScrollPane();
        projTree = new javax.swing.JTree();
        propProjPanel = new javax.swing.JPanel();
        nameProjLabel = new javax.swing.JLabel();
        nameProjTextField = new javax.swing.JTextField();
        dataCreateLabel = new javax.swing.JLabel();
        dataCreateFormattedTextField = new javax.swing.JFormattedTextField();
        userNameLabel = new javax.swing.JLabel();
        userNameTextField = new javax.swing.JTextField();
        commentLabel = new javax.swing.JLabel();
        commentScrollPane = new javax.swing.JScrollPane();
        commentTextPane = new javax.swing.JTextPane();
        saveOrAddButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(analytics_it.Analytics_ITApp.class).getContext().getResourceMap(newOrOpenProjJDialog.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        projSplitPane.setName("projSplitPane"); // NOI18N

        treeProjScrollPane.setName("treeProjScrollPane"); // NOI18N

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Проекты");
        projTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        projTree.setName("projTree"); // NOI18N
        treeProjScrollPane.setViewportView(projTree);

        projSplitPane.setLeftComponent(treeProjScrollPane);

        propProjPanel.setName("propProjPanel"); // NOI18N

        nameProjLabel.setText(resourceMap.getString("nameProjLabel.text")); // NOI18N
        nameProjLabel.setName("nameProjLabel"); // NOI18N

        nameProjTextField.setName("nameProjTextField"); // NOI18N

        dataCreateLabel.setText(resourceMap.getString("dataCreateLabel.text")); // NOI18N
        dataCreateLabel.setName("dataCreateLabel"); // NOI18N

        dataCreateFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));
        dataCreateFormattedTextField.setName("dataCreateFormattedTextField"); // NOI18N

        userNameLabel.setText(resourceMap.getString("userNameLabel.text")); // NOI18N
        userNameLabel.setName("userNameLabel"); // NOI18N

        userNameTextField.setName("userNameTextField"); // NOI18N

        commentLabel.setText(resourceMap.getString("commentLabel.text")); // NOI18N
        commentLabel.setName("commentLabel"); // NOI18N

        commentScrollPane.setName("commentScrollPane"); // NOI18N

        commentTextPane.setName("commentTextPane"); // NOI18N
        commentScrollPane.setViewportView(commentTextPane);

        saveOrAddButton.setText(resourceMap.getString("saveOrAddButton.text")); // NOI18N
        saveOrAddButton.setName("saveOrAddButton"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(analytics_it.Analytics_ITApp.class).getContext().getActionMap(newOrOpenProjJDialog.class, this);
        closeButton.setAction(actionMap.get("quit")); // NOI18N
        closeButton.setText(resourceMap.getString("closeButton.text")); // NOI18N
        closeButton.setName("closeButton"); // NOI18N

        javax.swing.GroupLayout propProjPanelLayout = new javax.swing.GroupLayout(propProjPanel);
        propProjPanel.setLayout(propProjPanelLayout);
        propProjPanelLayout.setHorizontalGroup(
            propProjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, propProjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(propProjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(commentScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addComponent(userNameLabel, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(commentLabel, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(propProjPanelLayout.createSequentialGroup()
                        .addComponent(saveOrAddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, propProjPanelLayout.createSequentialGroup()
                        .addGroup(propProjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameProjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dataCreateLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(propProjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dataCreateFormattedTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                            .addComponent(nameProjTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                            .addComponent(userNameTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE))))
                .addContainerGap())
        );
        propProjPanelLayout.setVerticalGroup(
            propProjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(propProjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(propProjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameProjLabel)
                    .addComponent(nameProjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(propProjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataCreateLabel)
                    .addComponent(dataCreateFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(propProjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userNameLabel)
                    .addComponent(userNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(commentLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(commentScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(propProjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(closeButton)
                    .addComponent(saveOrAddButton))
                .addContainerGap())
        );

        projSplitPane.setRightComponent(propProjPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(projSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(projSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                newOrOpenProjJDialog dialog = new newOrOpenProjJDialog(new javax.swing.JFrame(), true,null, null,false);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
            
                
                dialog.setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel commentLabel;
    private javax.swing.JScrollPane commentScrollPane;
    private javax.swing.JTextPane commentTextPane;
    private javax.swing.JFormattedTextField dataCreateFormattedTextField;
    private javax.swing.JLabel dataCreateLabel;
    private javax.swing.JLabel nameProjLabel;
    private javax.swing.JTextField nameProjTextField;
    private javax.swing.JSplitPane projSplitPane;
    private javax.swing.JTree projTree;
    private javax.swing.JPanel propProjPanel;
    private javax.swing.JButton saveOrAddButton;
    private javax.swing.JScrollPane treeProjScrollPane;
    private javax.swing.JLabel userNameLabel;
    private javax.swing.JTextField userNameTextField;
    // End of variables declaration//GEN-END:variables
    public void addNewItem()
    {
        // ВАЖНО - работа с уже готовым деревом может производится только через модель дерева.
        // Только в этом случае гарантируется правильная работа и вызов событий
        // В противном случае новые узлы могут быть не прорисованы
        DefaultTreeModel model = (DefaultTreeModel)projTree.getModel();
        Object obj = projTree.getTreeLock();
        if(obj!=null)
        {
            DefaultMutableTreeNode sel = (DefaultMutableTreeNode)obj;
            // Смотрим уровень вложенности и работаем в соответствии с ним
            if(sel.getLevel()==1) {
                DefaultMutableTreeNode tmp = new DefaultMutableTreeNode("Deep");
                model.insertNodeInto(tmp, sel, sel.getChildCount());
            }
            if(sel.isRoot()) {
                DefaultMutableTreeNode tmp = new DefaultMutableTreeNode("Midle");
                model.insertNodeInto(tmp, sel, sel.getChildCount());
            }
            projTree.expandPath(new TreePath(sel.getPath()));
        }
    }
    private void loadTreeProj() throws SQLException {
        DefaultTreeModel model =(DefaultTreeModel) projTree.getModel();
        DefaultMutableTreeNode root=(DefaultMutableTreeNode) model.getRoot();
        if (root!=null) {
            //root.setUserObject("Проекты");
            ResultSet rs = stmt.executeQuery( "SELECT * FROM APP.AProjects");
            while (rs.next()) {
                DefaultMutableTreeNode newdir = new DefaultMutableTreeNode();
                newdir = new DefaultMutableTreeNode(rs.getString("nameProj"));
                root.add(newdir);
            }
            rs.close();
            model.reload();
        }
    }
    void doMouseClicked(MouseEvent me) {
        TreePath tp = projTree.getPathForLocation(me.getX(), me.getY());
        if (tp != null) {
            ResultSet rs;
            try {
                rs = stmt.executeQuery("SELECT * FROM APP.AProjects where nameProj = '"+tp.getLastPathComponent().toString()+'\'');
                if (rs!=null) {
                    rs.last();
                    nameProjTextField.setText(rs.getString("nameProj"));
                    dataCreateFormattedTextField.setText(rs.getDate("dataCreate").toString());
                    userNameTextField.setText(rs.getString("userName"));
                    commentTextPane.setText(rs.getString("comment"));
                    idProj = rs.getInt("idProj");
                    rs.close();
                }
            } catch (SQLException ex) {
                Logger.getLogger(newOrOpenProjJDialog.class.getName()).log(Level.SEVERE, null, ex);
               
            }
            //JOptionPane.showMessageDialog(this, tp.getLastPathComponent().toString());
        }
    }
    
    private void updateProj() {
        //если добавление проекта, то добавляем запись, иначе - обновляем
        if (idProj<0) {
            try {
                
                stmt.executeUpdate("INSERT INTO APP.AProjects (nameProj,userName,dataCreate,comment)"
                        + " VALUES('" + nameProjTextField.getText() + "','" + userNameTextField.getText()
                        + "','" + dataCreateFormattedTextField.getText() + "','" + commentTextPane.getText() + "')");
                 ResultSet rs = stmt.executeQuery("SELECT * FROM APP.AProjects where nameProj = '"+nameProjTextField.getText()+'\'');
                 rs.last();
                 idProj = rs.getInt("idProj");
            } catch (SQLException ex) {
                Logger.getLogger(newOrOpenProjJDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                stmt.executeUpdate("UPDATE APP.AProjects SET "
                                            + "nameProj = '" + nameProjTextField.getText()
                                            + "',userName ='" + userNameTextField.getText()
                                            + "',comment ='" + commentTextPane.getText()
                                  + "' where idProj = " + String.valueOf(idProj));
            } catch (SQLException ex) {
                Logger.getLogger(newOrOpenProjJDialog.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
            
    }
    private java.sql.Statement stmt = null;
    private Analytics_ITView owner;
    private int idProj = -1;
}
